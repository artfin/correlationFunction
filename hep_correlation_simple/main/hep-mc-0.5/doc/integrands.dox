/**

\defgroup integrands Integrand Functions

\brief How integrand functions are written

Functions that can be integrated by the Monte Carlo algorithms must accept a
single parameter of the type \ref mc_point and return a value of type `T`. For
example, an integrand of the form \f$ f(x) := x^2 \f$ implemented with double
precision numbers would look like:
\code
double square(hep::mc_point<double> const& x)
{
    return x.point[0] * x.point[0];
}
\endcode
Some integration algorithms, e.g. \ref vegas, supply additional information that
can be accessed by capturing the argument with a different type, e.g. for VEGAS
by \ref vegas_point :
\code
double square(hep::vegas_point<double> const& x)
{
    return x.point[0] * x.point[0];
}
\endcode

If additional variables in the integrand are necessary, they can be supplied by
global variables or using functors:
\code
class power
{
public:
    power(double exponent)
        : exponent(exponent)
    {
    }

    double operator()(hep::mc_point<double> const& x)
    {
        return std::pow(x.point[0], exponent);
    }

private:
    double exponent;
};
\endcode

Starting with version 0.5 it is possible to generate differential distributions,
which can be generated if a second argument is accepted, e.g.
\code
double square_with_distribution(
	hep::mc_point<double> const& x,
	hep::projector<double>& projector
) {
	double const x = x.point[0];
	double const f = x * x;

	// add the the tuple `(x, f)` to the zeroeth distribution
	projector.add(0, x, f);

	return f;
}
\endcode

Specifying the integrand is not enough for the Monte Carlo integration routines.
They also must know how many dimensions, i.e. how many random numbers, the
integrand requires and the numeric type with which the operations should be
performed. If distribution should be accumulated during the integration the
binning (how many bins, upper and lower boundaries) must be specified as well.
Since this is generic for all algorithms the complete integrand information is
specified by creating an \ref integrand, which looks for the examples above:
\code
// the integer specifies the dimension of the integrand `square`, `double`
// specifies the numeric type the integration algorithm should use
auto square_integrand = hep::make_integrand<double>(square, 1);

// captures `exponent = 2.0` with an instance of `power` with integrand
// `power::operator()`
auto power_integrand = hep::make_integrand<double>(power(2.0), 1);

// the third argument specifies the distribution parameters: the x-axis ranges
// from -10 to 10 and is subdivided into 100 bins
auto square_distributions = hep::make_integrand<double>(square, 1,
	hep::make_dist_params(-10.0, +10.0, 200));
\endcode

An integrand for a multi channel integrator requires even more information
because the user PDFs and CDFs must be provided. Both must be calculated in
function that we call `map` and has the following signature:
\code
T map(
    std::size_t channel,
    std::vector<T> const& random_numbers,
    std::vector<T>& coordinates,
    std::vector<T>& densities,
    hep::multi_channel_map action
);
\endcode
A \ref multi_channel_integrand is now created e.g. as follows:
\code
auto mc_integrand = hep::make_multi_channel_integrand<double>(
    function, // the integrand function that we wish to integrate
    10,       // the integration is ten dimensional
    map,      // the map function providing PDFs and CDFs
    20,       // `map` maps the ten random numbers to twenty in `coordinates`
    200       // `map` uses two hundred channels
);
\endcode

*/
